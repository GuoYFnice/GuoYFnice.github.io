(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{504:function(t,a,s){"use strict";s.r(a);var n=s(4),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"算法题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法题"}},[t._v("#")]),t._v(" 算法题")]),t._v(" "),s("p",[t._v("阅读神三元博客进行归纳总结")]),t._v(" "),s("h2",{attrs:{id:"对于链表进行操作的题目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对于链表进行操作的题目"}},[t._v("#")]),t._v(" 对于链表进行操作的题目")]),t._v(" "),s("h3",{attrs:{id:"_1、反转链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、反转链表"}},[t._v("#")]),t._v(" 1、反转链表")]),t._v(" "),s("p",[t._v("例题")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("输入: 1->2->3->4->5->NULL\n输出: 5->4->3->2->1->NULL\n")])])]),s("p",[t._v("申明链式结构为")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("val")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("可以通过循环来进行")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("reservelist")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("head")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" pre "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" cur "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将元素的上一个节点保存")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将元素的下一个节点保存为上一个节点")]),t._v("\n        cur"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pre \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将这个节点保存为pre")]),t._v("\n        pre "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//进入下一个节点")]),t._v("\n        cur "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" next\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" pre\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("可以使用循环递归进行")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("reservelist")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("head")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("reserve")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("pre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("cur")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//现将下一个节点进行保存")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将节点的指针指向上一个节点")]),t._v("\n        cur"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pre\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//递归")]),t._v("\n       \t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reserve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reserve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"力扣上的题目解决"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#力扣上的题目解决"}},[t._v("#")]),t._v(" 力扣上的题目解决")]),t._v(" "),s("h3",{attrs:{id:"_1、有一个同学在学习分式。他需要将一个连分数化成最简分数，你能帮助他吗？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、有一个同学在学习分式。他需要将一个连分数化成最简分数，你能帮助他吗？"}},[t._v("#")]),t._v(" 1、有一个同学在学习分式。他需要将一个连分数化成最简分数，你能帮助他吗？")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/09/fraction_example_1.jpg",alt:"img"}})]),t._v(" "),s("p",[t._v("连分数是形如上图的分式。在本题中，所有系数都是大于等于0的整数。")]),t._v(" "),s("p",[t._v("输入的cont代表连分数的系数（cont[0]代表上图的a0，以此类推）。返回一个长度为2的数组[n, m]，使得连分数的值等于n / m，且n, m最大公约数为1。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var fraction = function(cont) {\n    let up = 1\n    let down = cont[cont.length-1];\n    for(let i = cont.length-2 ; i>=0;--i){\n        up = up + down*cont[i];\n        [up,down] = [down,up];\n    }\n    return [down, up];\n}\n//每一次就是分数相加在进行倒\n")])])]),s("h3",{attrs:{id:"_2、给你一个整数数组-nums，请你返回其中位数为-偶数-的数字的个数。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、给你一个整数数组-nums，请你返回其中位数为-偶数-的数字的个数。"}},[t._v("#")]),t._v(" 2、给你一个整数数组 nums，请你返回其中位数为 偶数 的数字的个数。")]),t._v(" "),s("p",[t._v("示例 1：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("输入：nums = [12,345,2,6,7896]\n输出：2\n解释：\n12 是 2 位数字（位数为偶数） \n345 是 3 位数字（位数为奇数）  \n2 是 1 位数字（位数为奇数） \n6 是 1 位数字 位数为奇数） \n7896 是 4 位数字（位数为偶数）  \n因此只有 12 和 7896 是位数为偶数的数字\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var findNumbers = function(nums) {\n    let num = 0 \n    nums.map(item =>{\n        if(item.toString().length%2===0){\n            num =num +1\n        }\n    })\n    return num\n};\n//数字的长度可以先将它转换为字符串\n")])])]),s("h3",{attrs:{id:"_3、根据每日-气温-列表，请重新生成一个列表，对应位置的输入是你需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用-0-来代替。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、根据每日-气温-列表，请重新生成一个列表，对应位置的输入是你需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用-0-来代替。"}},[t._v("#")]),t._v(" 3、根据每日 气温 列表，请重新生成一个列表，对应位置的输入是你需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用 0 来代替。")]),t._v(" "),s("p",[t._v("例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。")]),t._v(" "),s("p",[t._v("提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。")]),t._v(" "),s("h4",{attrs:{id:"方法一-、暴力破解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法一-、暴力破解"}},[t._v("#")]),t._v(" 方法一  、暴力破解")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var dailyTemperatures = function(T) {\n    let a = []\n    for(let i = 0;i<T.length;i++){\n        let b = 0\n        for(let j = i+1;j<T.length;j++){\n            if(T[j]>T[i]){\n                b = j-i\n                break\n            }\n        }\n        a.push(b)\n    }\n    return a \n};\n")])])]),s("h4",{attrs:{id:"方法二、使用栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法二、使用栈"}},[t._v("#")]),t._v(" 方法二、使用栈")]),t._v(" "),s("p",[t._v("还不会")]),t._v(" "),s("h3",{attrs:{id:"_4、给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。"}},[t._v("#")]),t._v(" 4、给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。")]),t._v(" "),s("p",[t._v("具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被计为是不同的子串。")]),t._v(" "),s("p",[t._v("示例 1:")]),t._v(" "),s("p",[t._v('输入: "abc"\n输出: 3\n解释: 三个回文子串: "a", "b", "c".\n示例 2:')]),t._v(" "),s("p",[t._v('输入: "aaa"\n输出: 6\n说明: 6个回文子串: "a", "a", "a", "aa", "aa", "aaa".')]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var countSubstrings = function(s) {\n    let num = 0 \n    function find(s,i,j){\n        while(i>=0 && j<s.length && s[i]==s[j]){\n            i= i-1\n            j=j+1\n            num =num+1\n        }\n    }\n    for(let i = 0; i < s.length; i++){\n        find(s, i , i) //检查abba这种\n        find(s, i , i+1)//检查aabaa这种\n    }\n    return num\n};\n")])])]),s("p",[t._v("5、给定一个整数数组，你需要寻找一个连续的子数组，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。")]),t._v(" "),s("p",[t._v("你找到的子数组应是最短的，请输出它的长度。")]),t._v(" "),s("p",[t._v("示例 1:")]),t._v(" "),s("p",[t._v("输入: [2, 6, 4, 8, 10, 9, 15]\n输出: 5\n解释: 你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var findUnsortedSubarray = function(nums) {\n    let a = [...nums]\n    let satrt = 0\n    let end = 0 \n    nums.sort((a, b) => a - b);\n    let i = 0 \n    let j = nums.length-1\n     while (i < nums.length) {\n        if (nums[i] != a[i]) {\n            start = i;\n            break;\n        }\n        i++;\n    }\n\n    while (j >= 0) {\n        if (nums[j] != a[j]) {\n            end = j;\n            break;\n        }\n        j--;\n    }\n    return end - satrt\n};\n先对数组进行排序\n对排序过后的数组与原数组比较\n前后两个指针\n")])])]),s("h3",{attrs:{id:"_5、"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、"}},[t._v("#")]),t._v(" 5、")])])}),[],!1,null,null,null);a.default=e.exports}}]);