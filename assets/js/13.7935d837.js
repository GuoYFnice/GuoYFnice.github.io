(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{505:function(t,a,s){"use strict";s.r(a);var e=s(4),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"react"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[t._v("#")]),t._v(" react")]),t._v(" "),s("h2",{attrs:{id:"基本内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本内容"}},[t._v("#")]),t._v(" 基本内容")]),t._v(" "),s("div",{staticClass:"language-react extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nclass Header extends Component {\n  render () {\n    return (\n      <div>\n        <h1>React 小书</h1>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Header />,\n  document.getElementById('root')\n)\n")])])]),s("h3",{attrs:{id:"reactdom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reactdom"}},[t._v("#")]),t._v(" ReactDOM")]),t._v(" "),s("p",[s("code",[t._v("ReactDOM")]),t._v(" 可以帮助我们把 React 组件渲染到页面上去")]),t._v(" "),s("p",[t._v("ReactDOM.render"),s("code",[t._v("功能就是把组件渲染并且构造 DOM 树，然后插入到页面上某个特定的元素上（在这里是 id 为")]),t._v("root"),s("code",[t._v("的")]),t._v("div"),s("code",[t._v("元素）。")])]),t._v(" "),s("p",[t._v("只要你要写 React.js 组件，那么就必须要引入这两个东西(React/组件父类component)")]),t._v(" "),s("h3",{attrs:{id:"jsx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jsx"}},[t._v("#")]),t._v(" JSX")]),t._v(" "),s("p",[s("em",[s("strong",[t._v("所谓的 JSX 其实就是 JavaScript 对象")])])]),t._v(" "),s("p",[s("strong",[t._v("JSX到页面的过程：JSX先通过babel编译和react.js构造成为JavaScript对象在通过reactdom.render变成dom元素，最后插入页面")])]),t._v(" "),s("p",[t._v("因为class是JavaScript的关键字，所以使用className来进行增加类名")]),t._v(" "),s("p",[s("em",[s("strong",[t._v("自定义的组件都必须要用大写字母开头，普通的 HTML 标签都用小写字母开头")])])]),t._v(" "),s("p",[s("em",[t._v("on* 的事件监听只能用在普通的 HTML 的标签上，而不能用在组件标签上")])]),t._v(" "),s("h3",{attrs:{id:"setstate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setstate"}},[t._v("#")]),t._v(" setState")]),t._v(" "),s("p",[s("code",[t._v("setState")]),t._v(" 方法由父类 "),s("code",[t._v("Component")]),t._v(" 所提供。"),s("em",[t._v("当我们调用这个函数的时候，React.js 会更新组件的状态 state ，并且重新调用 render 方法，然后再把 render 方法所渲染的最新的内容显示到页面上")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("当调用setState是，react.js不会立刻修改state，而是把这个对象放到一个更新队列里面，稍后才会从队列当中把新的状态提取出来合并到 "),s("code",[t._v("state")]),t._v(" 当中，然后再触发组件更新。")])]),t._v(" "),s("p",[t._v("例如：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleClickOnLikeButton")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => this.state.count 还是 undefined")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => undefined + 1 = NaN")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => NaN + 2 = NaN")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n")])])]),s("p",[t._v("上面的代码的运行结果并不能达到我们的预期，我们希望 "),s("code",[t._v("count")]),t._v(" 运行结果是 "),s("code",[t._v("3")]),t._v(" ，可是最后得到的是 "),s("code",[t._v("NaN")]),t._v("。但是这种后续操作依赖前一个 "),s("code",[t._v("setState")]),t._v(" 的结果的情况并不罕见。")]),t._v(" "),s("p",[t._v("这里就自然地引出了 "),s("code",[t._v("setState")]),t._v(" 的第二种使用方式，可以接受一个函数作为参数。React.js 会把上一个 "),s("code",[t._v("setState")]),t._v(" 的结果传入这个函数，你就可以使用该结果进行运算、操作，然后返回一个对象作为更新 "),s("code",[t._v("state")]),t._v(" 的对象：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleClickOnLikeButton")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prevState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prevState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" prevState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 上一个 setState 的返回是 count 为 0，当前返回 1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prevState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" prevState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 上一个 setState 的返回是 count 为 1，当前返回 3")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最后的结果是 this.state.count 为 3")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("setstate可以接受两种格式（对象和函数）")]),t._v(" "),s("p",[s("strong",[t._v("对象：传入一个对象的时候，这个对象表示该组件的新状态。但你只需要传入需要更新的部分就可以了，而不需要传入整个对象")])]),t._v(" "),s("p",[s("strong",[t._v("函数：可以接受一个函数作为参数。React.js 会把上一个 "),s("code",[t._v("setState")]),t._v(" 的结果传入这个函数")])]),t._v(" "),s("p",[t._v("渲染多个setstate时不用担心性能，因为React.js 内部会把 JavaScript 事件循环中的消息队列的同一个消息中的 "),s("code",[t._v("setState")]),t._v(" 都进行合并以后再重新渲染组件")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("setState只在合成事件和钩子函数中是“异步”的，在原生事件和setTimeout 中都是同步的。")])]),t._v(" "),s("li",[s("strong",[t._v("setState 的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形成了所谓的“异步”，当然可以通过第二个参数 setState(partialState, callback) 中的callback拿到更新后的结果。")])]),t._v(" "),s("li",[s("strong",[t._v("setState 的批量更新优化也是建立在“异步”（合成事件、钩子函数）之上的，在原生事件和setTimeout 中不会批量更新，在“异步”中如果对同一个值进行多次setState，setState的批量更新策略会对其进行覆盖，取最后一次的执行，如果是同时setState多个不同的值，在更新时会对其进行合并批量更新。")])])]),t._v(" "),s("h3",{attrs:{id:"props"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[t._v("#")]),t._v(" props")]),t._v(" "),s("ol",[s("li",[t._v("为了使得组件的可定制性更强，在使用组件的时候，可以在标签上加属性来传入配置参数。")]),t._v(" "),s("li",[t._v("组件可以在内部通过 "),s("code",[t._v("this.props")]),t._v(" 获取到配置参数，组件可以根据 "),s("code",[t._v("props")]),t._v(" 的不同来确定自己的显示形态，达到可配置的效果。")]),t._v(" "),s("li",[t._v("可以通过给组件添加类属性 "),s("code",[t._v("defaultProps")]),t._v(" 来配置默认参数。")]),t._v(" "),s("li",[s("code",[t._v("props")]),t._v(" 一旦传入，你就不可以在组件内部对它进行修改。但是你可以通过父组件主动重新渲染的方式来传入新的 "),s("code",[t._v("props")]),t._v("，从而达到更新的效果。")])]),t._v(" "),s("p",[s("strong",[t._v("dangerouslySetHTML")])]),t._v(" "),s("p",[t._v("为了预防xss攻击，在 React.js 当中所有的表达式插入的内容都会被自动转义")]),t._v(" "),s("p",[t._v("需要给 "),s("code",[t._v("dangerouslySetInnerHTML")]),t._v(" 传入一个对象，这个对象的 "),s("code",[t._v("__html")]),t._v(" 属性值就相当于元素的 "),s("code",[t._v("innerHTML")]),t._v("，这样我们就可以动态渲染元素的 "),s("code",[t._v("innerHTML")]),t._v(" 结构了。")]),t._v(" "),s("h2",{attrs:{id:"生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),s("p",[t._v("React 16.8 +的生命周期分为三个阶段,分别是挂载阶段、更新阶段、卸载阶段")]),t._v(" "),s("h3",{attrs:{id:"挂载阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#挂载阶段"}},[t._v("#")]),t._v(" 挂载阶段")]),t._v(" "),s("p",[s("em",[t._v("React.js 将组件渲染，并且构造 DOM 元素然后塞入页面的过程称为组件的挂载")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("-> constructor()\n-> componentWillMount()\n-> render()\n// 然后构造 DOM 元素插入页面\n-> componentDidMount()\n// 即将从页面中删除\n-> componentWillUnmount()\n// 从页面中删除\n")])])]),s("p",[s("code",[t._v("componentWillMount")]),t._v(" 和 "),s("code",[t._v("componentDidMount")]),t._v(" 都是可以像 "),s("code",[t._v("render")]),t._v(" 方法一样自定义在组件的内部。挂载的时候，React.js 会在组件的 "),s("code",[t._v("render")]),t._v(" 之前调用 "),s("code",[t._v("componentWillMount")]),t._v("，在 DOM 元素塞入页面以后调用 "),s("code",[t._v("componentDidMount")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("我们一般会把组件的 "),s("code",[t._v("state")]),t._v(" 的初始化工作放在 "),s("code",[t._v("constructor")]),t._v(" 里面去做；在 "),s("code",[t._v("componentWillMount")]),t._v(" 进行组件的启动工作，例如 Ajax 数据拉取、定时器的启动；组件从页面上销毁的时候，有时候需要一些数据的清理，例如定时器的清理，就会放在 "),s("code",[t._v("componentWillUnmount")]),t._v(" 里面去做。")])]),t._v(" "),s("p",[s("strong",[t._v("说一下本节没有提到的 "),s("code",[t._v("componentDidMount")]),t._v(" 。一般来说，有些组件的启动工作是依赖 DOM 的，例如动画的启动，而 "),s("code",[t._v("componentWillMount")]),t._v(" 的时候组件还没挂载完成，所以没法进行这些启动工作，这时候就可以把这些操作放在 "),s("code",[t._v("componentDidMount")]),t._v(" 当中。")])]),t._v(" "),s("h3",{attrs:{id:"更新阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新阶段"}},[t._v("#")]),t._v(" 更新阶段")]),t._v(" "),s("p",[t._v("更新阶段是"),s("code",[t._v("setState")]),t._v(" 导致 React.js 重新渲染组件并且把组件的变化应用到 DOM 元素上的过程，"),s("em",[t._v("这是一个组件的变化过程")])]),t._v(" "),s("ol",[s("li",[s("code",[t._v("shouldComponentUpdate(nextProps, nextState)")]),t._v("：你可以通过这个方法控制组件是否重新渲染。如果返回 "),s("code",[t._v("false")]),t._v(" 组件就不会重新渲染。这个生命周期在 React.js 性能优化上非常有用。")]),t._v(" "),s("li",[s("code",[t._v("componentWillReceiveProps(nextProps)")]),t._v("：组件从父组件接收到新的 "),s("code",[t._v("props")]),t._v(" 之前调用。")]),t._v(" "),s("li",[s("code",[t._v("componentWillUpdate()")]),t._v("：组件开始重新渲染之前调用。")]),t._v(" "),s("li",[s("code",[t._v("componentDidUpdate()")]),t._v("：组件重新渲染并且把更改变更到真实的 DOM 以后调用。")])]),t._v(" "),s("h3",{attrs:{id:"卸载阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#卸载阶段"}},[t._v("#")]),t._v(" 卸载阶段")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("即将从页面删除\n->componentWillUnmount\n从页面删除\n")])])]),s("h3",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),s("h2",{attrs:{id:"高阶组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高阶组件"}},[t._v("#")]),t._v(" 高阶组件")]),t._v(" "),s("p",[s("em",[s("strong",[t._v("高阶组件就是一个函数，传给它一个组件，它返回一个新的组件。")])])]),t._v(" "),s("p",[s("em",[t._v("其实就是为了组件之间的代码复用")]),t._v("。组件可能有着某些相同的逻辑，把这些逻辑抽离出来，放到高阶组件中进行复用。"),s("em",[t._v("高阶组件内部的包装组件和被包装组件之间通过 props 传递数据")])]),t._v(" "),s("h2",{attrs:{id:"context"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#context"}},[t._v("#")]),t._v(" context")]),t._v(" "),s("p",[t._v("组件只要往自己的 context 里面放了某些状态，这个组件之下的所有子组件都直接访问这个状态而不需要通过中间组件的传递。一个组件的 context 只有它的子组件能够访问，它的父组件是不能访问到的，你可以理解每个组件的 context 就是瀑布的源头，只能往下流不能往上飞。")]),t._v(" "),s("h4",{attrs:{id:"如何使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何使用"}},[t._v("#")]),t._v(" 如何使用")]),t._v(" "),s("p",[t._v("一个组件可以通过 "),s("code",[t._v("getChildContext")]),t._v(" 方法返回一个对象，这个对象就是子树的 context，提供 context 的组件必须提供 "),s("code",[t._v("childContextTypes")]),t._v(" 作为 context 的声明和验证。如果一个组件设置了 context，那么它的子组件都可以直接访问到里面的内容，它就像这个组件为根的子树的全局变量。任意深度的子组件都可以通过 "),s("code",[t._v("contextTypes")]),t._v(" 来声明你想要的 context 里面的哪些状态，然后可以通过 "),s("code",[t._v("this.context")]),t._v(" 访问到那些状态。")]),t._v(" "),s("p",[t._v("context 打破了组件和组件之间通过 "),s("code",[t._v("props")]),t._v(" 传递数据的规范，极大地增强了组件之间的耦合性。而且，就如全局变量一样，"),s("em",[t._v("context 里面的数据能被随意接触就能被随意修改")]),t._v("，每个组件都能够改 context 里面的内容会导致程序的运行不可预料。")]),t._v(" "),s("h2",{attrs:{id:"hooks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hooks"}},[t._v("#")]),t._v(" hooks")]),t._v(" "),s("p",[t._v("什么是hooks")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("Hook")]),t._v(" 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。")])]),t._v(" "),s("div",{staticClass:"language-react extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import React, { useState } from 'react';\n\nfunction Example() {\n  // 声明一个新的叫做 “count” 的 state 变量\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n")])])]),s("h3",{attrs:{id:"state-hook"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#state-hook"}},[t._v("#")]),t._v(" state hook")]),t._v(" "),s("p",[t._v("const [count, setCount] = useState(0);")]),t._v(" "),s("p",[t._v("通过解构 [] 对state进行赋值")]),t._v(" "),s("h3",{attrs:{id:"effect-hook"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#effect-hook"}},[t._v("#")]),t._v(" effect hook")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("Effect Hook")]),t._v(" 可以让你在函数组件中执行副作用操作")]),t._v(" "),s("p",[t._v("如果你熟悉 React class 的生命周期函数，你可以把 "),s("code",[t._v("useEffect")]),t._v(" Hook 看做 "),s("code",[t._v("componentDidMount")]),t._v("，"),s("code",[t._v("componentDidUpdate")]),t._v(" 和 "),s("code",[t._v("componentWillUnmount")]),t._v(" 这三个函数的组合。")])])])}),[],!1,null,null,null);a.default=n.exports}}]);